
LedToggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000134  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000264  0800026c  0001026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000264  08000264  0001026c  2**0
                  CONTENTS
  4 .ARM          00000000  08000264  08000264  0001026c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000264  0800026c  0001026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000264  08000264  00010264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000268  08000268  00010268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800026c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800026c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000178  00000000  00000000  00010295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000e9  00000000  00000000  0001040d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000002c  00000000  00000000  000104f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00010528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000030  00000000  00000000  00010570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001a74  00000000  00000000  000105a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000607  00000000  00000000  00012014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000072f9  00000000  00000000  0001261b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00019914  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000054  00000000  00000000  00019964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800024c 	.word	0x0800024c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800024c 	.word	0x0800024c

08000170 <main>:
/* ODR is a Volatile pointer which is pointing to Struct
   data type Pins and then writing 1 on its member Pin13 */
volatile PA_ODR* ODR = (volatile PA_ODR*)(GPIO_PABase + 0x0c);

int main()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_APB2ENR |= 1<<2; 	   // Writing 00000010 on RCC Register Offset 0x18
 8000174:	4b0b      	ldr	r3, [pc, #44]	; (80001a4 <main+0x34>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a0a      	ldr	r2, [pc, #40]	; (80001a4 <main+0x34>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6013      	str	r3, [r2, #0]
	GPIO_PA_CRH &= 0xFF0FFFFF; // Keep the previous state of Register
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <main+0x38>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a08      	ldr	r2, [pc, #32]	; (80001a8 <main+0x38>)
 8000186:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800018a:	6013      	str	r3, [r2, #0]
	GPIO_PA_CRH |= 0x00200000; // Writing 0010 from bits between 20 - 23
 800018c:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <main+0x38>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a05      	ldr	r2, [pc, #20]	; (80001a8 <main+0x38>)
 8000192:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000196:	6013      	str	r3, [r2, #0]
		//----------------------------------------------------------------------------------------------------------

		/* 3rd Way is the simplest by all means since we use bitwise operators directly to
   write into the register's desired pin as shown */

		GPIO_PA_ODR |= 0x00000000;      // Clearing the register first from the last state
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <main+0x3c>)
 800019a:	4a04      	ldr	r2, [pc, #16]	; (80001ac <main+0x3c>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	6013      	str	r3, [r2, #0]
	while(1){
 80001a0:	e7fa      	b.n	8000198 <main+0x28>
 80001a2:	bf00      	nop
 80001a4:	40021018 	.word	0x40021018
 80001a8:	40010804 	.word	0x40010804
 80001ac:	4001080c 	.word	0x4001080c

080001b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001b0:	480d      	ldr	r0, [pc, #52]	; (80001e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001b8:	480c      	ldr	r0, [pc, #48]	; (80001ec <LoopForever+0x6>)
  ldr r1, =_edata
 80001ba:	490d      	ldr	r1, [pc, #52]	; (80001f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001bc:	4a0d      	ldr	r2, [pc, #52]	; (80001f4 <LoopForever+0xe>)
  movs r3, #0
 80001be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001c0:	e002      	b.n	80001c8 <LoopCopyDataInit>

080001c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001c6:	3304      	adds	r3, #4

080001c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001cc:	d3f9      	bcc.n	80001c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001ce:	4a0a      	ldr	r2, [pc, #40]	; (80001f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001d0:	4c0a      	ldr	r4, [pc, #40]	; (80001fc <LoopForever+0x16>)
  movs r3, #0
 80001d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001d4:	e001      	b.n	80001da <LoopFillZerobss>

080001d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001d8:	3204      	adds	r2, #4

080001da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001dc:	d3fb      	bcc.n	80001d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001de:	f000 f811 	bl	8000204 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001e2:	f7ff ffc5 	bl	8000170 <main>

080001e6 <LoopForever>:

LoopForever:
    b LoopForever
 80001e6:	e7fe      	b.n	80001e6 <LoopForever>
  ldr   r0, =_estack
 80001e8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80001ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80001f4:	0800026c 	.word	0x0800026c
  ldr r2, =_sbss
 80001f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80001fc:	2000001c 	.word	0x2000001c

08000200 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000200:	e7fe      	b.n	8000200 <ADC1_2_IRQHandler>
	...

08000204 <__libc_init_array>:
 8000204:	b570      	push	{r4, r5, r6, lr}
 8000206:	2600      	movs	r6, #0
 8000208:	4d0c      	ldr	r5, [pc, #48]	; (800023c <__libc_init_array+0x38>)
 800020a:	4c0d      	ldr	r4, [pc, #52]	; (8000240 <__libc_init_array+0x3c>)
 800020c:	1b64      	subs	r4, r4, r5
 800020e:	10a4      	asrs	r4, r4, #2
 8000210:	42a6      	cmp	r6, r4
 8000212:	d109      	bne.n	8000228 <__libc_init_array+0x24>
 8000214:	f000 f81a 	bl	800024c <_init>
 8000218:	2600      	movs	r6, #0
 800021a:	4d0a      	ldr	r5, [pc, #40]	; (8000244 <__libc_init_array+0x40>)
 800021c:	4c0a      	ldr	r4, [pc, #40]	; (8000248 <__libc_init_array+0x44>)
 800021e:	1b64      	subs	r4, r4, r5
 8000220:	10a4      	asrs	r4, r4, #2
 8000222:	42a6      	cmp	r6, r4
 8000224:	d105      	bne.n	8000232 <__libc_init_array+0x2e>
 8000226:	bd70      	pop	{r4, r5, r6, pc}
 8000228:	f855 3b04 	ldr.w	r3, [r5], #4
 800022c:	4798      	blx	r3
 800022e:	3601      	adds	r6, #1
 8000230:	e7ee      	b.n	8000210 <__libc_init_array+0xc>
 8000232:	f855 3b04 	ldr.w	r3, [r5], #4
 8000236:	4798      	blx	r3
 8000238:	3601      	adds	r6, #1
 800023a:	e7f2      	b.n	8000222 <__libc_init_array+0x1e>
 800023c:	08000264 	.word	0x08000264
 8000240:	08000264 	.word	0x08000264
 8000244:	08000264 	.word	0x08000264
 8000248:	08000268 	.word	0x08000268

0800024c <_init>:
 800024c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800024e:	bf00      	nop
 8000250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000252:	bc08      	pop	{r3}
 8000254:	469e      	mov	lr, r3
 8000256:	4770      	bx	lr

08000258 <_fini>:
 8000258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800025a:	bf00      	nop
 800025c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800025e:	bc08      	pop	{r3}
 8000260:	469e      	mov	lr, r3
 8000262:	4770      	bx	lr
